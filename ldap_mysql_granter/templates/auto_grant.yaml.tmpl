# ====================
# === LDAP SECTION ===
# ====================
# The below ldap keys ldap_server_url, ldap_group_desc, ldap_auth.username_base & ldap_auth.password are used to parse the ldap server.  A command line equivilant can be built using the ldapsearch tool
# ldapsearch -H ldaps://ldap.example.com -v -x -D uid=int_test_user,ou=users,dc=nodomain -b ou=groups,dc=nodomain -w int_test_pass
# or using the ldap_query_tool
# ldap_query_tool -e ldap://127.0.0.1 -b "ou=groups,dc=nodomain" -u uid=int_test_user,ou=users,dc=nodomain -p int_test_pass
# ldap_server_url: ldaps://ldap.example.com
# ldap_group_desc: ou=groups,dc=nodomain
# this can be made to skip over users lower than ldap_min_gid usefull for system users
# ldap_min_gid: 20000 #
# ldap_auth:
#     username_base: uid=int_test_user,ou=users,dc=nodomain
#     password: <%= ENV['AG_LDAP_PASS'] %> # Recommended to not store passwords in yaml files
#     password: int_test_pass
# =========================
# === AWS EMAIL SECTION ===
# =========================
# Use this section is you want aws to send your emails
# It will override the gmail_auth section if both are implemented
# http://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-api.html
# aws_auth:
#     key: <%= ENV['AG_AWS_KEY'] %>
#     secret: <%= ENV['AG_AWS_SECRET'] %>
# ===========================
# === GMAIL EMAIL SECTION ===
# ===========================
# This is the default way to send emails about new accounts
# It this is blank you will be prompted to enter in the values
# unless the non-interactive flag is used in which case it will fail
gmail_auth:
    username: {{gmailUser}}
    password: {{gmailPass}}
# ========================
# === HASTEBIN SECTION ===
# ========================
# This section adds security if you install a local haste bin server: https://github.com/seejohnrun/haste-server/wiki/Installation
# If added the script (password_change_invite.py) that contains the new user password will be saved to the haste bin url instead of sent over email
# hastebin_url: "http://hastebin.com/"
# ==========================
# === MYSQL AUTH SECTION ===
# ==========================
# This section is required.  It is where you describe how to login to all of your custers to add permissions
# The grants user is recommended to have a privilege ceiling to ensure than no auto generated users have the SUPER privilege among others
# The revert user is expected to have more gants than the grants user namely the LOCK privilege.  As the revert process feeds in a mysqldump from the mysql.user table this user will need all required privileges needed to run that file
mysql_auth:
    grants:
        username: {{mysqlUser}}
        # consider using environment variables to not have this clear text
        # password: <%= ENV['AG_MYSQL_GRANTS_PASS'] %>
        password: {{mysqlPass}}
    revert:
        username: {{mysqlUser}}
        # consider using environment variables to not have this clear text
        # password: <%= ENV['AG_MYSQL_REVERT_PASS'] %>
        password: {{mysqlPass}}
# =========================
# === MYSQL USER FILTER ===
# =========================
# This section is useful to skip over any users in which you would prefer to manually handle their permissions
mysql_user_filter:
    # regex to totally ignore all changes to these users
    - 'debian-sys-maint@localhost'
    - 'root@.*'
# =========================
# === USER TO EMAIL MAP ===
# =========================
# This section is useful to force a users email rather that use the default
# The default for gmailUser me@example.com, and new user quickstart quickstart@example.com
user_to_email_map:
    quickstart : {{gmailUser}}
# ==============================
# === OVERRIDE GROUP SECTION ===
# ==============================
# This section is useful for one off where someone needs elevated permissions for a certain amount of time
# It can also be useful to add services here which might not exist in an ldap group if a user exists both here and in an ldap group the override_groups will override the ldap group
override_groups:
    o_quickstart_group: [quickstart]
# ==============================
# === GROUP TO GRANT SECTION ===
# ==============================
# This is the meat of the config it describes what permissions each member of the group should receive
# The following will generate the following statement:
# mysql -h localhost -u {{mysqlUser}} -p{{mysqlPassword}} -e "CREATE USER 'quickstart'@'%' IDENTIFIED BY 'REDACTED_AUTOGENERATED_PASSWORD'"
#   db_cluster_name_or_ip:
#       o_quickstart_group: (group o_ convention denotes override, does not come from ldap)
#           'hostname': component of username % is wildcard or alternatively you could use an ip
#               'database.table': (*'s denote wildcards here)
#                   - A_PRIVILIGE
#                   - ANOTHER_PRIVILIGE
#   another_db_cluster:
#       another_db_cluster:
group_to_grants_map:
    localhost:
        o_quickstart_group:
            'localhost':
                'test_db.test_table':
                    - SELECT
                    - UPDATE
                    - INSERT
                    - DELETE
